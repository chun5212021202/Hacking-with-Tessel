var util = require('util');
var EventEmitter = require('events').EventEmitter;

function LED(hardware) {
  var self = this;
  self.hardware = hardware;// this is a port

//magic numbers
	var slaveAddress = 0x70;
	self.i2c = new self.hardware.I2C(slaveAddress)

	var turn_on = 0x21;
	var HT16K33_BLINK_CMD = 0x80;
	var HT16K33_BLINK_DISPLAYON = 0x01;
	var HT16K33_BLINK_OFF = 0x00;
	var HT16K33_CMD_BRIGHTNESS = 0xE0;
	var brightness_level = 15;


  self.i2c.send(new Buffer([turn_on]), errorCallback);
  self.i2c.send(new Buffer([HT16K33_BLINK_CMD | HT16K33_BLINK_DISPLAYON | HT16K33_BLINK_OFF , HT16K33_CMD_BRIGHTNESS | brightness_level]), errorCallback)

  setImmediate(function emitReady() {
    self.emit('ready');
  });


}

util.inherits(LED, EventEmitter);

//mapping  :: 01234567
//						vvvvvvvv
//						07654321
LED.prototype.sendarray = function(input){
  var self = this;
	for(var i = 0; i< 8; i++){
		var output = (((input[i] >> 0) & 1) << 6) | (((input[i] >> 1) & 1) << 5) | (((input[i] >> 2) & 1) << 4) | (((input[i] >> 3) & 1) << 3) | (((input[i] >> 4) & 1) << 2) | (((input[i] >> 5) & 1) << 1) | (((input[i] >> 6) & 1) << 0) | (((input[i] >> 7) & 1) << 7);
		self.i2c.send(new Buffer([i*2, output]));
	}

}

LED.prototype.sendclear = function(){
  var self = this;
	self.sendarray([0,0,0,0,0,0,0,0]);
}

LED.prototype.sendpump = function(){
  var self = this;
// the code works but too slow, so I'm returning to the legacy code 
//	self.sendarray([0x3c,0x7e,0xe7,0xc3,0xc3,0xe7,0x7e,0x3c]);

	self.i2c.send(new Buffer([0x00, 0x1e])); // 00111100
	self.i2c.send(new Buffer([0x02, 0x3f])); // 01111110
	self.i2c.send(new Buffer([0x04, 0xf3])); // 11100111
	self.i2c.send(new Buffer([0x06, 0xe1])); // 11000011
	self.i2c.send(new Buffer([0x08, 0xe1])); // 11000011
	self.i2c.send(new Buffer([0x0a, 0xf3])); // 11100111
	self.i2c.send(new Buffer([0x0c, 0x3f])); // 01111110
	self.i2c.send(new Buffer([0x0e, 0x1e])); // 00111100

}

LED.prototype.sendnormal = function(){
  var self = this;

//	self.sendarray([0x00,0x00,0x18,0x24,0x24,0x18,0x00,0x00]);

	self.i2c.send(new Buffer([0x00, 0x00]));
	self.i2c.send(new Buffer([0x02, 0x00]));
	self.i2c.send(new Buffer([0x04, 0x0c]));
	self.i2c.send(new Buffer([0x06, 0x12]));
	self.i2c.send(new Buffer([0x08, 0x12]));
	self.i2c.send(new Buffer([0x0a, 0x0c]));
	self.i2c.send(new Buffer([0x0c, 0x00]));
	self.i2c.send(new Buffer([0x0e, 0x00]));

}

LED.prototype.sendrelease = function(){
  var self = this;

//	self.sendarray([0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00]);

	self.i2c.send(new Buffer([0x00, 0x00]));
	self.i2c.send(new Buffer([0x02, 0x00]));
	self.i2c.send(new Buffer([0x04, 0x00]));
	self.i2c.send(new Buffer([0x06, 0x0c]));
	self.i2c.send(new Buffer([0x08, 0x0c]));
	self.i2c.send(new Buffer([0x0a, 0x00]));
	self.i2c.send(new Buffer([0x0c, 0x00]));
	self.i2c.send(new Buffer([0x0e, 0x00]));

}


function use(hardware) {
  return new LED(hardware);
}

exports.LED = LED;
exports.use = use;
